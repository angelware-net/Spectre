use tauri::command;
use serde::{Deserialize, Serialize};
use reqwest::{Client, cookie::Jar, Url};
use std::sync::Arc;
use std::collections::HashMap;

#[derive(Deserialize)]
struct RequestParams {
    url: String,
    method: String,
    headers: Option<HashMap<String, String>>,
    body: Option<String>,
}

#[derive(Serialize)]
struct GenericResponse {
    status: u16,
    body: String,
}

#[derive(Default)]
struct State {
    cookie_jar: Arc<Jar>,
}

// Prevents additional console window on Windows in release, DO NOT REMOVE!!
// #![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]


#[command]
async fn generic_request(params: RequestParams, state: tauri::State<'_, State>) -> Result<GenericResponse, String> {
    let client = Client::builder()
        .cookie_store(true)
        .cookie_provider(state.cookie_jar.clone())
        .build()
        .map_err(|e| e.to_string())?;
    let mut request_builder = match params.method.as_str() {
        "GET" => client.get(&params.url),
        "POST" => client.post(&params.url),
        "PUT" => client.put(&params.url),
        "DELETE" => client.delete(&params.url),
        _ => return Err(format!("Unsupported method: {}", params.method)),
    };

    if let Some(headers) = params.headers {
        for (key, value) in headers {
            request_builder = request_builder.header(key, value);
        }
    }

    if let Some(body) = params.body {
        request_builder = request_builder.body(body);
    }

    match request_builder.send().await {
        Ok(response) => {
            let status = response.status().as_u16();
            let body = response.text().await.unwrap_or_default();
            Ok(GenericResponse { status, body })
        }
        Err(err) => Err(format!("Request error: {}", err)),
    }
}

#[command]
async fn logout(state: tauri::State<'_, State>) -> Result<(), String> {
    let client = Client::builder()
        .cookie_store(true)
        .cookie_provider(state.cookie_jar.clone())
        .build()
        .map_err(|e| e.to_string())?;

    let url = "https://vrchat.com/api/1/auth/logout";
    let response = client.post(url).send().await.map_err(|e| e.to_string())?;

    if response.status().is_success() {
        Ok(())
    } else {
        Err(format!("Logout failed: {:?}", response.status()))
    }
}

fn main() {
    tauri::Builder::default()
        .manage(State::default())
        .invoke_handler(tauri::generate_handler![generic_request, logout])
        .run(tauri::generate_context!())
        .expect("error while running tauri application");
}
