import WebSocket from '@tauri-apps/plugin-websocket';
import { toast } from 'svelte-sonner';
import type { XSNotification } from '$lib/xsoverlay/xsNotification';
import { getNumericSetting, getSetting } from '$lib/store';
import { type XSObject } from '$lib/xsoverlay/xsObject';

let xsocket: WebSocket;

const icon: string =
	'';

export async function createSocket() {
	const xsEnabled = await getSetting('xsOverlayEnabled');
	if (xsEnabled) {
		const xsP = await getNumericSetting('xsOverlayPort');
		const port: number = xsP || 42070;
		const address = `ws://localhost:${port}/?client=Spectre`;
		try {
			xsocket = await WebSocket.connect(address);
			console.log('Connected to XSOverlay');
		} catch (e) {
			console.error('Could not connect to XSOverlay, is XSO running?');
		}
	}
}

export async function disableXsOverlay() {
	if (xsocket) await xsocket.disconnect();
}

export async function sendXsNotification(msg: string) {
	const xsEnabled = await (getSetting('xsOverlayEnabled'));

	if (!xsEnabled) return;

	if (!xsocket) {
		await createSocket();
	}

	let notification: XSNotification = {
		type: 1,
		timeout: 3,
		height: 175,
		opacity: 0.85,
		volume: 0,
		title: 'SPECTRE',
		content: msg,
		useBase64Icon: true,
		icon: icon,
		sourceApp: 'Spectre 2.0'
	};

	let notificationJson = JSON.stringify(notification);

	let xsObj: XSObject = {
		sender: 'Spectre',
		target: 'xsoverlay',
		command: 'SendNotification',
		jsonData: notificationJson,
		rawData: ''
	}

	try {
		await xsocket.send(JSON.stringify(xsObj));
	} catch (e) {
		console.error('Could not send notification to XSOverlay!');
		// toast.error('Could not send notification to XSOverlay, please double check your settings.');
	}
}
